/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsImport } from './routes/terms'
import { Route as PrivacyPolicyImport } from './routes/privacy-policy'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as ExtImport } from './routes/_ext'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as ExtLoginSuccessImport } from './routes/_ext/login-success'
import { Route as ExtLoginFailedImport } from './routes/_ext/login-failed'
import { Route as ExtCallbackImport } from './routes/_ext/callback'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as ProtectedSettingsIndexImport } from './routes/_protected/settings/index'
import { Route as ProtectedDashboardIndexImport } from './routes/_protected/dashboard/index'

// Create/Update Routes

const TermsRoute = TermsImport.update({
  id: '/terms',
  path: '/terms',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyPolicyRoute = PrivacyPolicyImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const ExtRoute = ExtImport.update({
  id: '/_ext',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ExtLoginSuccessRoute = ExtLoginSuccessImport.update({
  id: '/login-success',
  path: '/login-success',
  getParentRoute: () => ExtRoute,
} as any)

const ExtLoginFailedRoute = ExtLoginFailedImport.update({
  id: '/login-failed',
  path: '/login-failed',
  getParentRoute: () => ExtRoute,
} as any)

const ExtCallbackRoute = ExtCallbackImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => ExtRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const ProtectedSettingsIndexRoute = ProtectedSettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedDashboardIndexRoute = ProtectedDashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => ProtectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_ext': {
      id: '/_ext'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ExtImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyImport
      parentRoute: typeof rootRoute
    }
    '/terms': {
      id: '/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof TermsImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_ext/callback': {
      id: '/_ext/callback'
      path: '/callback'
      fullPath: '/callback'
      preLoaderRoute: typeof ExtCallbackImport
      parentRoute: typeof ExtImport
    }
    '/_ext/login-failed': {
      id: '/_ext/login-failed'
      path: '/login-failed'
      fullPath: '/login-failed'
      preLoaderRoute: typeof ExtLoginFailedImport
      parentRoute: typeof ExtImport
    }
    '/_ext/login-success': {
      id: '/_ext/login-success'
      path: '/login-success'
      fullPath: '/login-success'
      preLoaderRoute: typeof ExtLoginSuccessImport
      parentRoute: typeof ExtImport
    }
    '/_protected/dashboard/': {
      id: '/_protected/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardIndexImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/settings/': {
      id: '/_protected/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsIndexImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface ExtRouteChildren {
  ExtCallbackRoute: typeof ExtCallbackRoute
  ExtLoginFailedRoute: typeof ExtLoginFailedRoute
  ExtLoginSuccessRoute: typeof ExtLoginSuccessRoute
}

const ExtRouteChildren: ExtRouteChildren = {
  ExtCallbackRoute: ExtCallbackRoute,
  ExtLoginFailedRoute: ExtLoginFailedRoute,
  ExtLoginSuccessRoute: ExtLoginSuccessRoute,
}

const ExtRouteWithChildren = ExtRoute._addFileChildren(ExtRouteChildren)

interface ProtectedRouteChildren {
  ProtectedDashboardIndexRoute: typeof ProtectedDashboardIndexRoute
  ProtectedSettingsIndexRoute: typeof ProtectedSettingsIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedDashboardIndexRoute: ProtectedDashboardIndexRoute,
  ProtectedSettingsIndexRoute: ProtectedSettingsIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/terms': typeof TermsRoute
  '/login': typeof AuthLoginRoute
  '/callback': typeof ExtCallbackRoute
  '/login-failed': typeof ExtLoginFailedRoute
  '/login-success': typeof ExtLoginSuccessRoute
  '/dashboard': typeof ProtectedDashboardIndexRoute
  '/settings': typeof ProtectedSettingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/terms': typeof TermsRoute
  '/login': typeof AuthLoginRoute
  '/callback': typeof ExtCallbackRoute
  '/login-failed': typeof ExtLoginFailedRoute
  '/login-success': typeof ExtLoginSuccessRoute
  '/dashboard': typeof ProtectedDashboardIndexRoute
  '/settings': typeof ProtectedSettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_ext': typeof ExtRouteWithChildren
  '/_protected': typeof ProtectedRouteWithChildren
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/terms': typeof TermsRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_ext/callback': typeof ExtCallbackRoute
  '/_ext/login-failed': typeof ExtLoginFailedRoute
  '/_ext/login-success': typeof ExtLoginSuccessRoute
  '/_protected/dashboard/': typeof ProtectedDashboardIndexRoute
  '/_protected/settings/': typeof ProtectedSettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/privacy-policy'
    | '/terms'
    | '/login'
    | '/callback'
    | '/login-failed'
    | '/login-success'
    | '/dashboard'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/privacy-policy'
    | '/terms'
    | '/login'
    | '/callback'
    | '/login-failed'
    | '/login-success'
    | '/dashboard'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_ext'
    | '/_protected'
    | '/privacy-policy'
    | '/terms'
    | '/_auth/login'
    | '/_ext/callback'
    | '/_ext/login-failed'
    | '/_ext/login-success'
    | '/_protected/dashboard/'
    | '/_protected/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  ExtRoute: typeof ExtRouteWithChildren
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  TermsRoute: typeof TermsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  ExtRoute: ExtRouteWithChildren,
  ProtectedRoute: ProtectedRouteWithChildren,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  TermsRoute: TermsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_ext",
        "/_protected",
        "/privacy-policy",
        "/terms"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login"
      ]
    },
    "/_ext": {
      "filePath": "_ext.tsx",
      "children": [
        "/_ext/callback",
        "/_ext/login-failed",
        "/_ext/login-success"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/dashboard/",
        "/_protected/settings/"
      ]
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.tsx"
    },
    "/terms": {
      "filePath": "terms.tsx"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_ext/callback": {
      "filePath": "_ext/callback.tsx",
      "parent": "/_ext"
    },
    "/_ext/login-failed": {
      "filePath": "_ext/login-failed.tsx",
      "parent": "/_ext"
    },
    "/_ext/login-success": {
      "filePath": "_ext/login-success.tsx",
      "parent": "/_ext"
    },
    "/_protected/dashboard/": {
      "filePath": "_protected/dashboard/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/settings/": {
      "filePath": "_protected/settings/index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
